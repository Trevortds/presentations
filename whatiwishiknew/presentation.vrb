\frametitle{Do it now: Functional programming}

Cluster computing relies on functional programming, so you should definitiely be familiar with it.

These two code samples do the same thing.

\begin{columns}[T]
  \begin{column}{.48\textwidth}
  % \centerline{\includegraphics[width=6cm]{figs/slowpandasloop.png}}
  \begin{lstlisting}[language=Python]
for i, row in big_everything.iterrows():
  if row.type == "Listings City":
    big_everything[i,'jsonstuff'] = re.sub("displayValue\":(.*)\"", lambda m: case_fixer(m, True), row.jsonstuff)

  else:
    big_everything[i,'jsonstuff'] = re.sub("displayValue\":(.*)\"", lambda m: case_fixer(m, False), row.jsonstuff)

  \end{lstlisting}
  \pause
  10 hours
  \end{column}

  \pause


  \begin{column}{.48\textwidth}
  % \centerline{\includegraphics[width=6cm]{figs/fastpandasfunc.png}}
  % \centerline{\includegraphics[width=6cm]{figs/slowpandasloop.png}}
  \begin{lstlisting}[language=Python]
def json_stuff_fixer(row):
  if row.type == "Listings City":
    return re.sub("displayValue\":(.*)\"", lambda m: case_fixer(m, True), row.jsonstuff)

  else:
    return re.sub("displayValue\":(.*)\"", lambda m: case_fixer(m, False), row.jsonstuff)


big_everything['jsonstuff'] = big_everything.apply(json_stuff_fixer, axis=1)
  \end{lstlisting}
  \pause


  4 minutes
  \end{column}
  \end{columns}

